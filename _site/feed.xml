<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://japh.se/feed.xml" rel="self" type="application/atom+xml" /><link href="http://japh.se/" rel="alternate" type="text/html" /><updated>2020-07-19T09:45:13+02:00</updated><id>http://japh.se/feed.xml</id><title type="html">http/japh.se</title><subtitle>just another perl hacker from sweden</subtitle><entry><title type="html">rip all images from all subreddits in one go</title><link href="http://japh.se/2020/07/18/rip-all-images-from-all-subreddits-in-one-go.html" rel="alternate" type="text/html" title="rip all images from all subreddits in one go" /><published>2020-07-18T00:00:00+02:00</published><updated>2020-07-18T00:00:00+02:00</updated><id>http://japh.se/2020/07/18/rip-all-images-from-all-subreddits-in-one-go</id><content type="html" xml:base="http://japh.se/2020/07/18/rip-all-images-from-all-subreddits-in-one-go.html">&lt;p&gt;Have you ever wanted to download all the high resolution images in a
particular subreddit, or perhaps from all the subreddits in a particular
category? Turns out, it’s easier than one would imagine, using standard
Linux tools.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Prerequisites&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A list of subreddits to download images (or other data) from.
We can work with some wallpaper subreddits for this example:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;subreddits.txt:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wallpapers
wallpaper
Offensive_Wallpapers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ve tried this approach on a category consisting of 350+ subreddits,
and ran into zero issues.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;This &lt;a href=&quot;https://github.com/trapd00r/utils/blob/master/reddit-dl&quot;&gt;reddit-dl&lt;/a&gt; script by Nicola.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The command-line JSON processor jq.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A loop.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for x in $(/bin/cat subreddits.txt); do mkdir -p ~/wallpapers/$x; cd ~/wallpapers/$x &amp;amp;&amp;amp; reddit-dl $x; done
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s quite fast as well, and soon your directory structure will look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3.7G	.
2.1G	./wallpapers
1.2G	./wallpaper
424M	./Offensive_Wallpapers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That’s &lt;strong&gt;1714&lt;/strong&gt; high resolution wallpapers downloaded in a few minutes.&lt;/p&gt;</content><author><name>Magnus Woldrich</name></author><category term="reddit," /><category term="linux" /><summary type="html">Have you ever wanted to download all the high resolution images in a particular subreddit, or perhaps from all the subreddits in a particular category? Turns out, it’s easier than one would imagine, using standard Linux tools.</summary></entry><entry><title type="html">edit files changed in last git commit</title><link href="http://japh.se/2019/04/12/edit-files-changed-in-last-git-commit.html" rel="alternate" type="text/html" title="edit files changed in last git commit" /><published>2019-04-12T00:00:00+02:00</published><updated>2019-04-12T00:00:00+02:00</updated><id>http://japh.se/2019/04/12/edit-files-changed-in-last-git-commit</id><content type="html" xml:base="http://japh.se/2019/04/12/edit-files-changed-in-last-git-commit.html">&lt;p&gt;Git is one of the tools where you can learn new things everyday.&lt;/p&gt;

&lt;p&gt;I’ve created two new aliases in my shellrc:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;show modified files in the last commit&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias gdd='git diff --name-only HEAD~1..HEAD | ls_color'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vimlast.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;edit them instead&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alias vimlast='vim $(git diff --name-only HEAD~1..HEAD)'
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Great way to quickly pick up where I left off yesterday!&lt;/p&gt;

&lt;p&gt;(The &lt;strong&gt;ls_color&lt;/strong&gt; tool is part of
&lt;a href=&quot;https://metacpan.org/pod/File::LsColor&quot;&gt;File::LsColor&lt;/a&gt;).&lt;/p&gt;</content><author><name>Magnus Woldrich</name></author><category term="git," /><category term="vim" /><summary type="html">Git is one of the tools where you can learn new things everyday.</summary></entry><entry><title type="html">adding LS_COLORS to ack3</title><link href="http://japh.se/2019/03/26/adding-LS_COLORS-to-ack3.html" rel="alternate" type="text/html" title="adding LS_COLORS to ack3" /><published>2019-03-26T00:00:00+01:00</published><updated>2019-03-26T00:00:00+01:00</updated><id>http://japh.se/2019/03/26/adding-LS_COLORS-to-ack3</id><content type="html" xml:base="http://japh.se/2019/03/26/adding-LS_COLORS-to-ack3.html">&lt;p&gt;A while back I made a quick hack in
&lt;a href=&quot;https://github.com/trapd00r/ack2&quot;&gt;ack2&lt;/a&gt; to make it use
&lt;a href=&quot;https://metacpan.org/pod/File::LsColor&quot;&gt;File::LsColor&lt;/a&gt; and
&lt;a href=&quot;https://github.com/trapd00r/LS_COLORS&quot;&gt;LS_COLORS&lt;/a&gt; for colorizing the
filenames instead of just Term::ANSIColor and the simple environment
variable ACK_COLOR_FILENAME.&lt;/p&gt;

&lt;p&gt;I figured it was pretty useful so I opened an issue over at
&lt;a href=&quot;https://github.com/beyondgrep/ack3/issues/191&quot;&gt;ack3&lt;/a&gt; requesting
comments for the idea. Was it something anyone else would find useful?&lt;/p&gt;

&lt;p&gt;At first, Andy Lester wasn’t to keen on the idea, but the discussion has
continued and it seems he has changed his mind. I don’t agree on the way
he wants to colorize filenames based on ack’s internal types (a great
feature of the program!), but he wants to support LS_COLORS as well so
it’s all good.&lt;/p&gt;

&lt;p&gt;Implementing a first working draft in ack3 wasn’t too hard, and you can
see the difference between plain old Term::ANSIColor and File::LsColor
output here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ack3_lscolor.png&quot; alt=&quot;ack&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It will be exciting to see what will happen with this, in the meantime
the code can be found over at
&lt;a href=&quot;https://github.com/trapd00r/ack3/tree/dircolors&quot;&gt;github&lt;/a&gt; in the
dircolors branch.&lt;/p&gt;</content><author><name>Magnus Woldrich</name></author><category term="perl," /><category term="ack," /><category term="colors," /><category term="LS_COLORS" /><summary type="html">A while back I made a quick hack in ack2 to make it use File::LsColor and LS_COLORS for colorizing the filenames instead of just Term::ANSIColor and the simple environment variable ACK_COLOR_FILENAME.</summary></entry><entry><title type="html">a &amp;lt;hr&amp;gt; tag for your terminal</title><link href="http://japh.se/2019/03/25/a-hr-tag-for-your-terminal.html" rel="alternate" type="text/html" title="a &lt;hr&gt; tag for your terminal" /><published>2019-03-25T00:00:00+01:00</published><updated>2019-03-25T00:00:00+01:00</updated><id>http://japh.se/2019/03/25/a-hr-tag-for-your-terminal</id><content type="html" xml:base="http://japh.se/2019/03/25/a-hr-tag-for-your-terminal.html">&lt;p&gt;At times when living my life in the terminal I run many commands in
quick succession that might produce a lot of output. Differencing where
the output actually comes from can be tiresome. Previously I’ve done
simple things like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;command1&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; command2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;but it’s not exactly visually striking, is it?&lt;/p&gt;

&lt;p&gt;So I crafted a little tool that solves this problem in a better way, and
it tries to be smart about it, too. By default, we try to determine the
size of the terminal window to make sure the hr spans across nicely.
The size of the bar can be configurable; maybe you don’t want the bar to span the entire terminal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;hr &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 10&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;or maybe you want it to span the entire window, but you’d like some padding:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;hr &lt;span class=&quot;nt&quot;&gt;--pre&lt;/span&gt; 10&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;wouldn’t it be nice to have padding on both sides, though?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;hr &lt;span class=&quot;nt&quot;&gt;--pre&lt;/span&gt; 10 &lt;span class=&quot;nt&quot;&gt;--post&lt;/span&gt; 10&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can add a bit of color to it as well, to make it stand out more from the rest of the data on screen:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;hr &lt;span class=&quot;nt&quot;&gt;--pre&lt;/span&gt; 10 &lt;span class=&quot;nt&quot;&gt;--post&lt;/span&gt; 10 &lt;span class=&quot;nt&quot;&gt;-fg&lt;/span&gt; 196&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and of course the actual character that’s used to create the bar is configurable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;hr &lt;span class=&quot;nt&quot;&gt;--pre&lt;/span&gt; 10 &lt;span class=&quot;nt&quot;&gt;--post&lt;/span&gt; 10 &lt;span class=&quot;nt&quot;&gt;-fg&lt;/span&gt; 196 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/trapd00r/hr&quot;&gt;hr&lt;/a&gt; supports foreground and background colors, as well as all attributes available in &lt;a href=&quot;https://metacpan.org/pod/Term::ExtendedColor&quot;&gt;Term::ExtendedColor&lt;/a&gt; (well, except blink…).&lt;/p&gt;

&lt;p&gt;Here’s a screenshot of what it can look like in a chain of commands (more screenshots in the examples section, below):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/hr.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;options&quot;&gt;Options&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-c,    --char       Character to use
-s,    --size       Number of columns
-pre,  --pre        Pad the left side with whitespace n
-post, --post       Pad the right side with whitespace n
-fg,   --fg         Foreground color to use, int 0-255
-bg,   --bg         Background color to use, int 0-255
-b,    --bold       Use bold
-i,    --italic     Use italics
-u,    --underline  Use underline
-r,    --reverse    Use reverse video

-h,    --help       Display this help and exit
-m,    --man        Display the manual and exit
-v,    --version    Display version info and exit
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;examples&quot;&gt;Examples&lt;/h1&gt;

&lt;p&gt;Due to the configurability of hr, differencing different hr invocations
from each other is no problem.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# display a yellow underlined bar using the default '=' character&lt;/span&gt;
    hr &lt;span class=&quot;nt&quot;&gt;-fg&lt;/span&gt; 220 &lt;span class=&quot;nt&quot;&gt;--underline&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/example01.png&quot; alt=&quot;example01.png&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# display a red solid bar padded by 10 columns from right and left&lt;/span&gt;
    hr &lt;span class=&quot;nt&quot;&gt;-fg&lt;/span&gt; 160 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; ▀ &lt;span class=&quot;nt&quot;&gt;--pre&lt;/span&gt; 10 &lt;span class=&quot;nt&quot;&gt;--post&lt;/span&gt; 10&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/example02.png&quot; alt=&quot;example02.png&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# display a solid grey, thick bar using ascii character _ and the bold,&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# underline and reverse video attributes&lt;/span&gt;

    hr &lt;span class=&quot;nt&quot;&gt;-fg&lt;/span&gt; 240 &lt;span class=&quot;nt&quot;&gt;-c_&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-bur&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/example03.png&quot; alt=&quot;example03.png&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# display a bar made of dots, with 5 column spacing one each size&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# and 20 columns wide.&lt;/span&gt;

    hr &lt;span class=&quot;nt&quot;&gt;-fg&lt;/span&gt; 197 &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt;· &lt;span class=&quot;nt&quot;&gt;-pre&lt;/span&gt; 5 &lt;span class=&quot;nt&quot;&gt;-post&lt;/span&gt; 5 &lt;span class=&quot;nt&quot;&gt;-size&lt;/span&gt; 20&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/example04.png&quot; alt=&quot;example04.png&quot; /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# use all options at once, because why not?&lt;/span&gt;
    hr &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fg&lt;/span&gt; 52 &lt;span class=&quot;nt&quot;&gt;-bg&lt;/span&gt; 196 &lt;span class=&quot;nt&quot;&gt;-biur&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; 70 &lt;span class=&quot;nt&quot;&gt;-pre&lt;/span&gt; 5 &lt;span class=&quot;nt&quot;&gt;-post&lt;/span&gt; 5&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/example05.png&quot; alt=&quot;example05.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonus&lt;/strong&gt;: advanced example using arithmetics, because math is hard.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# use several characters to form a bar using arithmetics&lt;/span&gt;
    hr &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;  japh  &quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-fg&lt;/span&gt; 1 &lt;span class=&quot;nt&quot;&gt;-bg&lt;/span&gt; 0 &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$COLUMNS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/example06.png&quot; alt=&quot;example06.png&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;LINKS&lt;/h1&gt;

&lt;p&gt;hr is available on &lt;a href=&quot;https://github.com/trapd00r/hr&quot;&gt;github&lt;/a&gt; as well as
on the &lt;a href=&quot;https://metacpan.org/pod/App::term::hr&quot;&gt;cpan&lt;/a&gt;, of course.&lt;/p&gt;</content><author><name>Magnus Woldrich</name></author><category term="perl," /><category term="terminal" /><summary type="html">At times when living my life in the terminal I run many commands in quick succession that might produce a lot of output. Differencing where the output actually comes from can be tiresome. Previously I’ve done simple things like</summary></entry><entry><title type="html">rtorrent harddrive lockup with many torrents solution</title><link href="http://japh.se/2019/03/09/solve-rtorrent-harddrive-lockup-with-many-torrents.html" rel="alternate" type="text/html" title="rtorrent harddrive lockup with many torrents solution" /><published>2019-03-09T00:00:00+01:00</published><updated>2019-03-09T00:00:00+01:00</updated><id>http://japh.se/2019/03/09/solve-rtorrent-harddrive-lockup-with-many-torrents</id><content type="html" xml:base="http://japh.se/2019/03/09/solve-rtorrent-harddrive-lockup-with-many-torrents.html">&lt;p&gt;rtorrent is a great piece of software, and with patches from the &lt;a href=&quot;https://github.com/pyroscope/rtorrent-
ps&quot;&gt;rtorrent-ps&lt;/a&gt; project it’s even better. Seeding many torrents, I started noticing
harddrive lockups every now and then, where the program wouldn’t respond
until I forcefully removed the usb cable to one of my drives.&lt;/p&gt;

&lt;p&gt;Figuring it could be that the drive itself was running bad, I just lived
with the issue for a while. Upon accident, I stumbled upon an &lt;a href=&quot;https://github.com/rakshasa/rtorrent/issues/180&quot;&gt;issue&lt;/a&gt; that looked relevant.&lt;/p&gt;

&lt;p&gt;Although some people think it could be an dns issue, some people also
reports that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It seems to happen when the session directory is being updated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Turns out that rtorrent saves all the sessions every 20 minutes by
default. With a large amount of torrents this can be a disk
performance hog.&lt;/p&gt;

&lt;p&gt;I tried to increase the interval to 12 hours instead:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;~/.rtorrent.rc&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
schedule2 = session_save, 1200, 43200, ((session.save))
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and I’ve had zero lockups or crashes since then.&lt;/p&gt;

&lt;p&gt;Current situation looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rtorrent.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
1.5 GiB +   1.8 MiB =   1.5 GiB    rtorrent main
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;which is pretty darn good I must say.&lt;/p&gt;</content><author><name>Magnus Woldrich</name></author><category term="rtorrent," /><category term="linux" /><summary type="html">rtorrent is a great piece of software, and with patches from the rtorrent-ps project it’s even better. Seeding many torrents, I started noticing harddrive lockups every now and then, where the program wouldn’t respond until I forcefully removed the usb cable to one of my drives.</summary></entry><entry><title type="html">ignore blob of text on irssi channel join</title><link href="http://japh.se/2019/02/20/ignore-blob-of-text-on-irssi-channel-join.html" rel="alternate" type="text/html" title="ignore blob of text on irssi channel join" /><published>2019-02-20T00:00:00+01:00</published><updated>2019-02-20T00:00:00+01:00</updated><id>http://japh.se/2019/02/20/ignore-blob-of-text-on-irssi-channel-join</id><content type="html" xml:base="http://japh.se/2019/02/20/ignore-blob-of-text-on-irssi-channel-join.html">&lt;p&gt;Lately I’ve been having some connectivity issues on my wifi-connected
raspberry pi. I run irssi among other things on it, and when I re-attach to the screen session running on it I’ll be greated by blobs of text like this one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Topic set by Zathrus ~tom@redhat/Zathrus [Fri Nov 16 18:15:40 2018]
&amp;gt; Home page for #vim: http://vi-improved.org
&amp;gt; Channel #vim created Sun Nov 26 07:42:44 2006
&amp;gt; Irssi: Join to #vim was synced in 74 secs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This blob of text is re-printed everytime you (re)join a channel, and
with a not so stable wifi connection it’ll very quickly fill up the
entire scrollback.&lt;/p&gt;

&lt;p&gt;Since I’m never interested in any of these info texts, I tried to just
/ignore it all together, but that doesn’t work even with a mask like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;\*: CRAP CTCPS JOINS PARTS QUITS MODES TOPICS WALLOPS INVITES NICKS DCC DCCMSGS CLIENTNOTICES CLIENTCRAP CLIENTERRORS
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It was suggested to me to examine the lines with &lt;a href=&quot;https://scripts.irssi.org/scripts/linebuffer.pl&quot;&gt;linebuffer.pl&lt;/a&gt;, so I did:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; Topic set by %bgrknight%_ ~grknight@gentoo/developer/grknight %K[%b%_Fri Jan  4 20:55:24 2019%K]   [CRAP]
&amp;gt; Home page for %R#gentoo%n: http://www.gentoo.org [CRAP]
&amp;gt; Channel %R#gentoo%n created Sat Sep 15 05:15:36 2001   [CRAP]
&amp;gt; %WIrssi:%_ Join to %_#gentoo%_ was synced in 2%_ secs     [NO_ACT CLIENTNOTICES]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To me it seems that the ignore mask SHOULD work, and this is indeed a &lt;a href=&quot;https://github.com/irssi/irssi/issues/992&quot;&gt;bug&lt;/a&gt; in irssi.&lt;/p&gt;

&lt;p&gt;I went ahead and just &lt;a href=&quot;https://github.com/trapd00r/irssi/commit/87f38a20beda81e409a72efd323f5db45d824927&quot;&gt;removed&lt;/a&gt; the formats defined in module-
formats.c.
It works, but kind of annoying having to recompile (remember, this is a pi and it takes forever).&lt;/p&gt;

&lt;p&gt;A better solution was to whip up a simple &lt;a href=&quot;https://github.com/irssi/scripts.irssi.org/blob/master/scripts/ignore_join_blob.pl&quot;&gt;script&lt;/a&gt; that stops the text to be printed to the terminal:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-perl&quot; data-lang=&quot;perl&quot;&gt;&lt;span class=&quot;k&quot;&gt;sub &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sig_print_text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$stripped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;@_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$dest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;MSGLEVEL_CRAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$stripped&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;m/Topic (for|set)|Channel [#]\S+ created|Home page for [#]\S+/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nn&quot;&gt;Irssi::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;signal_stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;Irssi::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;signal_add_first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'print text'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;\&amp;amp;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sig_print_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Works great and now I’m able to follow up on conversations without
having to scroll like crazy whenever I reattach my screen session.&lt;/p&gt;</content><author><name>Magnus Woldrich</name></author><category term="irssi," /><category term="perl" /><summary type="html">Lately I’ve been having some connectivity issues on my wifi-connected raspberry pi. I run irssi among other things on it, and when I re-attach to the screen session running on it I’ll be greated by blobs of text like this one:</summary></entry><entry><title type="html">clone all github repos and gists in one go</title><link href="http://japh.se/2019/02/04/clone_all_github_repos_and_gists_in_one_go.html" rel="alternate" type="text/html" title="clone all github repos and gists in one go" /><published>2019-02-04T00:00:00+01:00</published><updated>2019-02-04T00:00:00+01:00</updated><id>http://japh.se/2019/02/04/clone_all_github_repos_and_gists_in_one_go</id><content type="html" xml:base="http://japh.se/2019/02/04/clone_all_github_repos_and_gists_in_one_go.html">&lt;p&gt;At times I find myself wanting to clone every repository I have on
github. Additionally, today I wanted to check out all the forgotten
gists I’ve made over the years.&lt;/p&gt;

&lt;p&gt;I whipped up these two scripts:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;clone_all_repos&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# abstract: clone all github repos from GITHUB_USER&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;CNTX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'users'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_USER&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# a maximum of 100 repos per page&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;END_PAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;PAGE &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..&lt;span class=&quot;nv&quot;&gt;$END_PAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://api.github.com/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$CNTX&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/repos?page=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PAGE&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;amp;per_page=100&quot;&lt;/span&gt; |
    &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git_url*'&lt;/span&gt; |
    &lt;span class=&quot;nb&quot;&gt;cut&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; 4     |
    xargs &lt;span class=&quot;nt&quot;&gt;-L1&lt;/span&gt; git clone
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;clone_all_gists&lt;/strong&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# abstract: clone all gists from GITHUB_USER&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_USER&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;gist &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; https://api.github.com/users/&lt;span class=&quot;nv&quot;&gt;$NAME&lt;/span&gt;/gists &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;git_pull_url &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Po&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https:.+[.]git'&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;git clone &lt;span class=&quot;nv&quot;&gt;$gist&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember to set your GITHUB_USER environment variable, and adjust the
END_PAGE variable in the clone_all_repos script if necessary.&lt;/p&gt;

&lt;p&gt;They are both available &lt;a href=&quot;https://github.com/trapd00r/github-clone-all&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;</content><author><name>Magnus Woldrich</name></author><category term="github," /><category term="cli," /><category term="git" /><summary type="html">At times I find myself wanting to clone every repository I have on github. Additionally, today I wanted to check out all the forgotten gists I’ve made over the years.</summary></entry><entry><title type="html">use a custom sound file for terminal bell</title><link href="http://japh.se/2019/02/02/use-a-custom-sound-file-for-terminal-bell.html" rel="alternate" type="text/html" title="use a custom sound file for terminal bell" /><published>2019-02-02T00:00:00+01:00</published><updated>2019-02-02T00:00:00+01:00</updated><id>http://japh.se/2019/02/02/use-a-custom-sound-file-for-terminal-bell</id><content type="html" xml:base="http://japh.se/2019/02/02/use-a-custom-sound-file-for-terminal-bell.html">&lt;p&gt;I wanted to enable my internal pc speaker; you know that annoying
beeping thing. Normally the pcspkr module is blacklisted by default
(since it’s so annoying), so I re-enabled it.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;modprobe pcspkr
&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;No beep.&lt;/p&gt;

&lt;p&gt;Upon closer inspection of my computer, turns out there’s no actual
speaker inside my computer. Well isn’t that a shame.
I did however discover that you can simulate one by using X resources:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;URxvt&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;bell-command: play ~/awp.wav&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The actual sound will obviously go through your normal speakers or
headphones, but that’s okay. Now I can do things like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;unrar x big_movie.rar &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;Big_movie.mkv /mnt/NAS/movies &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and walk away from the computer. I will still hear the sound of the &lt;a href=&quot;https://github.com/trapd00r/configs/blob/master/awp.wav?raw=true&quot;&gt;CS 1.6 AWP&lt;/a&gt;
firing off at me when the operation is done.&lt;/p&gt;

&lt;p&gt;The bell-command can be anything, and the play command is part of the
ALSA packages.&lt;/p&gt;</content><author><name>Magnus Woldrich</name></author><category term="linux," /><category term="terminal" /><summary type="html">I wanted to enable my internal pc speaker; you know that annoying beeping thing. Normally the pcspkr module is blacklisted by default (since it’s so annoying), so I re-enabled it.</summary></entry><entry><title type="html">use mhddfs to mount several physical disks as one</title><link href="http://japh.se/2019/01/27/use-mhddfs-to-mount-several-physical-disks-as-one.html" rel="alternate" type="text/html" title="use mhddfs to mount several physical disks as one" /><published>2019-01-27T00:00:00+01:00</published><updated>2019-01-27T00:00:00+01:00</updated><id>http://japh.se/2019/01/27/use-mhddfs-to-mount-several-physical-disks-as-one</id><content type="html" xml:base="http://japh.se/2019/01/27/use-mhddfs-to-mount-several-physical-disks-as-one.html">&lt;p&gt;I’m guilty as charged with obsessive compulsion disorder when it comes to
my files. Nothing more so than my music collection. I’ve spent more time
sorting it through the years than I’d like to think about.&lt;/p&gt;

&lt;p&gt;An annoying thing with this behavior is that I have to move files from
time to time across physical disks and partitions. This can be quite
tiresome and time consuming.&lt;/p&gt;

&lt;p&gt;Let me present &lt;a href=&quot;https://romanrm.net/mhddfs&quot;&gt;mhddfs&lt;/a&gt;. It’s a filesystem
in userspace that allows you to mount several physical drives into one
fixed mount point. Doesn’t have to be physical drives either, can be
partitions or plain directories as well.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;df -h /mnt/music*&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Filesystem                          Size  Used Avail Use% Mounted on
/dev/sdc1                           916G  840G   30G  97% /mnt/music
/dev/sdb1                           916G  788G   82G  91% /mnt/music2
/dev/sdd1                           1.8T  126G  1.6T   8% /mnt/music3
/mnt/music;/mnt/music2;/mnt/music3  3.6T  1.8T  1.7T  51% /mnt/music4
total                               7.2T  3.5T  3.4T  51% -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the first three drives are mounted in /mnt/music4.
Everything on sdb1, sdc1 and sdd1 can be found at that mount point.
If I decide to stop using mhddfs, I can do so at any time without any
form of data loss. Files are written to the disk with enough free space.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mhddfs#/mnt/music,/mnt/music2,/mnt/music3   /mnt/music4 fuse defaults,user,allow_other 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Magnus Woldrich</name></author><category term="filesystem," /><category term="linux" /><summary type="html">I’m guilty as charged with obsessive compulsion disorder when it comes to my files. Nothing more so than my music collection. I’ve spent more time sorting it through the years than I’d like to think about.</summary></entry><entry><title type="html">color urls in urxvt without abusing underline property</title><link href="http://japh.se/2019/01/23/color-urls-in-urxvt-without-abusing-underline-property.html" rel="alternate" type="text/html" title="color urls in urxvt without abusing underline property" /><published>2019-01-23T00:00:00+01:00</published><updated>2019-01-23T00:00:00+01:00</updated><id>http://japh.se/2019/01/23/color-urls-in-urxvt-without-abusing-underline-property</id><content type="html" xml:base="http://japh.se/2019/01/23/color-urls-in-urxvt-without-abusing-underline-property.html">&lt;p&gt;The url-select perl addon for urxvt is awesome for mouseless opening of urls.&lt;/p&gt;

&lt;p&gt;Without it, you have to select the url with your mouse, and remember which
clipboard buffer it ends up in prior to pasting it in your browser (unless you
&lt;a href=&quot;https://github.com/trapd00r/clipboard_to_primary&quot;&gt;use something that’ll sync your buffers&lt;/a&gt;).
If you’re anything like me, nine times out of ten you’ll end up pasting
from the wrong buffer.&lt;/p&gt;

&lt;p&gt;It would be nice if we could have the urls stand out a bit from the rest of the
text on the screen, and here’s how to do it properly.&lt;/p&gt;

&lt;p&gt;One way to color URLs in urxvt is to set the properties:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url-select.underline: true
colorUL: #ff0000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A couple of downsides to this method:
 &lt;img src=&quot;/assets/urxvt_underline_red.png&quot; align=&quot;right&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;You have to underline the urls, which can look ugly&lt;/li&gt;
  &lt;li&gt;You effectively change the properties for &lt;strong&gt;all&lt;/strong&gt; underlined text.
This is most probably not what you want.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Instead, make sure to set properties for only the matched data, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;matcher.rend.0: Bold fg5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/urxvt_urls.png&quot; alt=&quot;urls&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The relevant bits from my Xresources:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;URxvt.perl-lib:              /home/scp1/dev/urxvt-extensions
URxvt.perl-ext-common:       default,clipboard,url-select,keyboard-select,bell-command,matcher
URxvt.keysym.C-u:            perl:url-select:select_next
URxvt.perl-ext:              selection,mark-yank-urls
URxvt.url-select.launcher:   /usr/lib/firefox/firefox
URxvt.urlLauncher:           /usr/lib/firefox/firefox
URxvt.url-select.underline:  false
URxvt.keysym.C-Up:           perl:keyboard-select:activate
URxvt.keysym.M-s:            perl:keyboard-select:search

URxvt.matcher.rend.0:        Italic fg5
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And as always, my ~/etc is &lt;a href=&quot;https://github.com/trapd00r/configs&quot;&gt;available on github&lt;/a&gt;&lt;/p&gt;</content><author><name>Magnus Woldrich</name></author><category term="urxvt," /><category term="colors," /><category term="terminal" /><summary type="html">The url-select perl addon for urxvt is awesome for mouseless opening of urls.</summary></entry></feed>